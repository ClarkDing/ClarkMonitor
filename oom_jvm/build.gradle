plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'top.clarkding.oom.jvm'
    compileSdk rootProject.ext.compile_version

    defaultConfig {
        minSdkVersion rootProject.ext.min_version
        targetSdkVersion rootProject.ext.compile_version

        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                cppFlags '-std=c++17', '-fno-exceptions', '-fno-rtti'
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            externalNativeBuild {
                cmake {
                    cppFlags '-Wl,--gc-sections', '-fvisibility=hidden', '-flto'
                }
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    ndkVersion rootProject.ext.ndk_version
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
        }
    }

    flavorDimensions "stl_mode"
    productFlavors {
        StaticCpp {
            dimension "stl_mode"
            ext.artifactIdSuffix = 'static'
            externalNativeBuild {
                cmake {
                    arguments = ["-DANDROID_STL=c++_static"]
                }
            }
        }

        SharedCpp {
            dimension "stl_mode"
            ext.artifactIdSuffix = ''
            externalNativeBuild {
                cmake {
                    arguments = ["-DANDROID_STL=c++_shared"]
                }
            }
        }
    }

    packagingOptions {
        exclude('lib/*/libc++_shared.so')
        exclude('META-INF/*')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation "androidx.core:core-ktx:$kot_core"
    implementation "androidx.appcompat:appcompat:$app_compat"
    implementation "com.google.android.material:material:$material"

    implementation project(path: ':oom_base')
    implementation project(path: ':fastdump')
}

ext['PROJ_BASENAME'] = "ClarkOomJvm"
ext['PROJ_VERSION'] = "1.0.1"

afterEvaluate {

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    publishing {
        repositories {
            maven {
                name "local"
                url = "$buildDir/repo"
            }
            maven {
                name "sonartype-Staging"
                url = properties.getProperty('sonartypeStaging')
                credentials {
                    username = properties.getProperty('ossrhUsername')
                    password = properties.getProperty('ossrhPassword')
                }
            }
            maven {
                name "sonatype-Snapshots"
                url = properties.getProperty('sonatypeSnapshots')
                credentials {
                    username = properties.getProperty('ossrhUsername')
                    password = properties.getProperty('ossrhPassword')
                }
            }
        }
        publications {
            // Creates a Maven publication called "release".
            releaseStatic(MavenPublication) {
                from components.StaticCppRelease

                groupId = properties.getProperty('PROJ_GROUP')
                artifactId = PROJ_BASENAME
                version = String.format("%s-STATIC", PROJ_VERSION)

                pom {
                    name = PROJ_BASENAME
                    description = properties.getProperty('PROJ_DESCRIPTION')
                    url = properties.getProperty('PROJ_VCSURL')
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = properties.getProperty('DEVELOPER_ID')
                            name = properties.getProperty('DEVELOPER_NAME')
                            email = properties.getProperty('DEVELOPER_EMAIL')
                        }
                    }
                    scm {
                        connection = properties.getProperty('PROJ_WEBSITEURL')
                        developerConnection = properties.getProperty('PROJ_VCSURL')
                        url = properties.getProperty('PROJ_URL')
                    }
                }
            }
            releaseShare(MavenPublication) {
                from components.SharedCppRelease

                groupId = properties.getProperty('PROJ_GROUP')
                artifactId = PROJ_BASENAME
                version = String.format("%s-SHARED", PROJ_VERSION)

                pom {
                    name = PROJ_BASENAME
                    description = properties.getProperty('PROJ_DESCRIPTION')
                    url = properties.getProperty('PROJ_VCSURL')
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = properties.getProperty('DEVELOPER_ID')
                            name = properties.getProperty('DEVELOPER_NAME')
                            email = properties.getProperty('DEVELOPER_EMAIL')
                        }
                    }
                    scm {
                        connection = properties.getProperty('PROJ_WEBSITEURL')
                        developerConnection = properties.getProperty('PROJ_VCSURL')
                        url = properties.getProperty('PROJ_URL')
                    }
                }
            }
            debuStatic(MavenPublication) {
                from components.StaticCppDebug

                groupId = properties.getProperty('PROJ_GROUP')
                artifactId = PROJ_BASENAME
                version = String.format("%s-STATIC-SNAPSHOT", PROJ_VERSION)

                pom {
                    name = PROJ_BASENAME
                    description = properties.getProperty('PROJ_DESCRIPTION')
                    url = properties.getProperty('PROJ_WEBSITEURL')

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = properties.getProperty('DEVELOPER_ID')
                            name = properties.getProperty('DEVELOPER_NAME')
                            email = properties.getProperty('DEVELOPER_EMAIL')
                        }
                    }
                    scm {
                        connection = properties.getProperty('PROJ_WEBSITEURL')
                        developerConnection = properties.getProperty('PROJ_VCSURL')
                        url = properties.getProperty('PROJ_URL')
                    }
                }
            }
            debuShared(MavenPublication) {
                from components.SharedCppDebug

                groupId = properties.getProperty('PROJ_GROUP')
                artifactId = PROJ_BASENAME
                version = String.format("%s-SHARED-SNAPSHOT", PROJ_VERSION)

                pom {
                    name = PROJ_BASENAME
                    description = properties.getProperty('PROJ_DESCRIPTION')
                    url = properties.getProperty('PROJ_WEBSITEURL')

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = properties.getProperty('DEVELOPER_ID')
                            name = properties.getProperty('DEVELOPER_NAME')
                            email = properties.getProperty('DEVELOPER_EMAIL')
                        }
                    }
                    scm {
                        connection = properties.getProperty('PROJ_WEBSITEURL')
                        developerConnection = properties.getProperty('PROJ_VCSURL')
                        url = properties.getProperty('PROJ_URL')
                    }
                }
            }
        }

        signing {
            sign publishing.publications.releaseStatic, publishing.publications.releaseShare, publishing.publications.debuStatic, publishing.publications.debuShared
        }
    }
}